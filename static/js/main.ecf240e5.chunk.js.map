{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","mini","setMini","tsi","setTsi","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","getMini","url","fetch","method","then","res","json","data","map","v","name","value","catch","console","error","getTsi","getYesterday","dttm","Date","setHours","getHours","setDate","getDate","toISOString","slice","getUrlMini","getUrlTsi","pad","num","size","toString","length","lastDttmMini","lastDttmTsi","shift","style","padding","option","title","text","tooltip","trigger","formatter","params","date","getFullYear","getMonth","getMinutes","getSeconds","parseInt","axisPointer","animation","legend","grid","left","right","bottom","containLabel","toolbox","show","feature","dataZoom","yAxisIndex","saveAsImage","xAxis","type","splitLine","yAxis","boundaryGap","series","showSymbol","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecf240e5.chunk.js","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef\n} from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport Row from 'antd/lib/row';\n// import Col from 'antd/lib/col';\n\n\nfunction App() {\n\n  const [mini, setMini] = useState([]);\n  const [tsi, setTsi] = useState([]);\n  \n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    });\n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  };\n\n  function getMini(url) {\n    fetch(url, {\n        method: 'GET',\n        'Content-Type': 'application/json'\n      })\n      .then(res => res.json())\n      .then(res => {\n        const data = res.map(v => ({\n          name: v['dttm'],\n          value: [v['dttm'], v['conc']]\n        }));\n        setMini([...mini, ...data]);\n      })\n      .catch(console.error);\n  };\n\n  function getTsi(url) {\n    fetch(url, {\n        method: 'GET',\n        'Content-Type': 'application/json'\n      })\n      .then(res => res.json())\n      .then(res => {\n        const data = res.map(v => ({\n          name: v['dttm'],\n          value: [v['dttm'], v['conc']]\n        }));\n        setTsi([...tsi, ...data]);\n      })\n      .catch(console.error);\n  };\n\n  const getYesterday = () => {\n    const dttm = new Date();\n    dttm.setHours(dttm.getHours() + 2);\n    dttm.setDate(dttm.getDate() - 1);\n    return dttm.toISOString().slice(0, 19)\n  };\n\n  const getUrlMini = dttm => {\n    return `http://atm-dev.site:1337/api/raw_mini?start=${dttm}`\n  };\n  \n  const getUrlTsi = dttm => {\n    return `http://atm-dev.site:1337/api/raw_tsi?start=${dttm}`\n  };\n\n  useEffect(() => {\n    const dttm = getYesterday();\n    getMini(getUrlMini(dttm));\n    getTsi(getUrlTsi(dttm));\n  }, []);\n\n  const appendNew = () => {\n    const lastDttmMini = mini.slice(-1)[0]['name'].slice(0, 19);\n    const lastDttmTsi = tsi.slice(-1)[0]['name'].slice(0, 19);\n    getMini(getUrlMini(lastDttmMini));\n    getTsi(getUrlTsi(lastDttmTsi));\n  };\n\n  const dropOld = () => {\n    const dttm = getYesterday();\n    let data;\n    if (mini.length) {\n      data = [...mini];\n      while (new Date(dttm) > new Date(data[0]['name'])) {\n        data.shift();\n      };\n      if (data.length !== mini.length) {\n        setMini(data);\n      };\n    }\n    if (tsi.length) {\n      data = [...tsi];\n      while (new Date(dttm) > new Date(data[0]['name'])) {\n        data.shift();\n      };\n      if (data.length !== tsi.length) {\n        setTsi(data);\n      };\n    };\n  };\n\n  useInterval(appendNew, 1*60*1000);\n  useInterval(dropOld, 10*60*1000);\n\n  function pad(num, size) {\n    num = num.toString();\n    while (num.length < size) num = \"0\" + num;\n    return num;\n  }\n\n  return (\n    <Row style={{padding:20}}>\n      <ReactEcharts \n        option = {{\n          title: {\n            text: 'SMEAR III CPC comparison'\n          },\n          tooltip: {\n            trigger: 'axis',\n            formatter: function (params) {\n              params = params[0];\n              var date = new Date(params.name);\n              return (\n                date.getFullYear() + '-' +\n                pad(date.getMonth() + 1, 2) + '-' +\n                pad(date.getDate(), 2) + ' ' +\n                pad(date.getHours(), 2) + ':' +\n                pad(date.getMinutes(), 2) + ':' +\n                pad(date.getSeconds(), 2) + ', ' +\n                parseInt(params.value[1])\n              );\n            },\n            axisPointer: {\n              animation: false\n            }\n          },\n          legend: {\n            data: ['mini_CPC', 'Tsi_CPC']\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true\n          },\n          toolbox: {\n            show: true,\n            feature: {\n              dataZoom: {\n                yAxisIndex: 'none'\n              },\n              saveAsImage: {}\n            }\n          },\n          xAxis: {\n            type: 'time',\n            splitLine: {\n              show: true\n            }\n          },\n          yAxis: {\n            type: 'value',\n            name: 'cn (cm-3)',\n            boundaryGap: [0, '100%'],\n            splitLine: {\n              show: true\n            }\n          },\n          series: [\n            {\n              name: 'mini_CPC',\n              type: 'line',\n              showSymbol: false,\n              data: mini\n            },\n            {\n              name: 'Tsi_CPC',\n              type: 'line',\n              showSymbol: false,\n              data: tsi\n            },\n          ]\n        }}\n      />\n    </Row>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}